/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* This code was generated by avrogencpp 1.12.0-SNAPSHOT. Do not edit.*/

#ifndef HK_SCHEMA_HH_2071189857_H
#define HK_SCHEMA_HH_2071189857_H


#include <sstream>
#include <any>
#include "avro/Specific.hh"
#include "avro/Encoder.hh"
#include "avro/Decoder.hh"

namespace HK {
struct TimeSpec {
    int64_t tv_sec;
    int64_t tv_nsec;
    TimeSpec() :
        tv_sec(int64_t()),
        tv_nsec(int64_t())
        { }
};

struct HeaderHK {
    int32_t apid;
    int32_t counter;
    int32_t type;
    TimeSpec time;
    int32_t abstime;
    int32_t runID;
    int32_t configID;
    int32_t wformcount;
    int32_t flags;
    int32_t crc;
    HeaderHK() :
        apid(int32_t()),
        counter(int32_t()),
        type(int32_t()),
        time(TimeSpec()),
        abstime(int32_t()),
        runID(int32_t()),
        configID(int32_t()),
        wformcount(int32_t()),
        flags(int32_t()),
        crc(int32_t())
        { }
};

}
namespace avro {
template<> struct codec_traits<HK::TimeSpec> {
    static void encode(Encoder& e, const HK::TimeSpec& v) {
        avro::encode(e, v.tv_sec);
        avro::encode(e, v.tv_nsec);
    }
    static void decode(Decoder& d, HK::TimeSpec& v) {
        if (avro::ResolvingDecoder *rd =
            dynamic_cast<avro::ResolvingDecoder *>(&d)) {
            const std::vector<size_t> fo = rd->fieldOrder();
            for (std::vector<size_t>::const_iterator it = fo.begin();
                it != fo.end(); ++it) {
                switch (*it) {
                case 0:
                    avro::decode(d, v.tv_sec);
                    break;
                case 1:
                    avro::decode(d, v.tv_nsec);
                    break;
                default:
                    break;
                }
            }
        } else {
            avro::decode(d, v.tv_sec);
            avro::decode(d, v.tv_nsec);
        }
    }
};

template<> struct codec_traits<HK::HeaderHK> {
    static void encode(Encoder& e, const HK::HeaderHK& v) {
        avro::encode(e, v.apid);
        avro::encode(e, v.counter);
        avro::encode(e, v.type);
        avro::encode(e, v.time);
        avro::encode(e, v.abstime);
        avro::encode(e, v.runID);
        avro::encode(e, v.configID);
        avro::encode(e, v.wformcount);
        avro::encode(e, v.flags);
        avro::encode(e, v.crc);
    }
    static void decode(Decoder& d, HK::HeaderHK& v) {
        if (avro::ResolvingDecoder *rd =
            dynamic_cast<avro::ResolvingDecoder *>(&d)) {
            const std::vector<size_t> fo = rd->fieldOrder();
            for (std::vector<size_t>::const_iterator it = fo.begin();
                it != fo.end(); ++it) {
                switch (*it) {
                case 0:
                    avro::decode(d, v.apid);
                    break;
                case 1:
                    avro::decode(d, v.counter);
                    break;
                case 2:
                    avro::decode(d, v.type);
                    break;
                case 3:
                    avro::decode(d, v.time);
                    break;
                case 4:
                    avro::decode(d, v.abstime);
                    break;
                case 5:
                    avro::decode(d, v.runID);
                    break;
                case 6:
                    avro::decode(d, v.configID);
                    break;
                case 7:
                    avro::decode(d, v.wformcount);
                    break;
                case 8:
                    avro::decode(d, v.flags);
                    break;
                case 9:
                    avro::decode(d, v.crc);
                    break;
                default:
                    break;
                }
            }
        } else {
            avro::decode(d, v.apid);
            avro::decode(d, v.counter);
            avro::decode(d, v.type);
            avro::decode(d, v.time);
            avro::decode(d, v.abstime);
            avro::decode(d, v.runID);
            avro::decode(d, v.configID);
            avro::decode(d, v.wformcount);
            avro::decode(d, v.flags);
            avro::decode(d, v.crc);
        }
    }
};

}
#endif
